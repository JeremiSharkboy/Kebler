# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test and package a WPF desktop application
# built on .NET Core.
# To learn how to migrate your existing WPF application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.  
# Replace the variables relative to your project in the "env" section below.
# 
# 2. Signing
# Generate a signing certificate in the Windows Application 
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
# 
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for 
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Main

on:
  push:
    tags:
      - 'v*.*.*'
    branches: [ master ]
    
jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to 
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Dir: src/
      Solution_Name: src/Kebler.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src/Kebler.Test/Kebler.Test.csproj  # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:

        
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: submodules-init
      uses: snickerbockers/submodules-init@v4

    - name: Get tag
      id: tag
      uses: dawidd6/action-get-tag@v1
      
      
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101      
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16
      
      
    - name: Release86
      run: dotnet publish src/Kebler/Kebler.csproj -p:PublishProfile=Properties\PublishProfiles\Release86.pubxml

    - name: Portable64
      run: dotnet publish src/Kebler/Kebler.csproj -p:PublishProfile=Properties\PublishProfiles\Portable64.pubxml
    
    - name: MOVE64
      run: move src\publish\Kebler.exe src\publish\KeblerPortable64.exe
      shell: cmd

    - name: Portable86
      run: dotnet publish src/Kebler/Kebler.csproj -p:PublishProfile=Properties\PublishProfiles\Portable86.pubxml

    - name: MOVE86&Del
      run: |
         move src\publish\Kebler.exe src\publish\KeblerPortable86.exe
         del src\publish\Kebler.pdb /F /Q
      shell: cmd

    - name: dir
      run: dir src\publish
      shell: cmd
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
       path: src\publish\
       name: BuildArchive
       
    - name: ZIP
      shell: bash
      run: |
        # Define some variables for things we need
        release_name="${{steps.tag.outputs.tag}}${{matrix.target}}"

        # Build everything
        # dotnet publish src/App/App.csproj --framework netcoreapp3.1 --runtime "${{ matrix.target }}" -c Release -o "$release_name"

        7z a -tzip "${release_name}.zip" ".\src\publish\RELEASE\*"
        dir    
      
 
      
    - name: Use tag
      run: echo ${{steps.tag.outputs.tag}}

     
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{steps.tag.outputs.tag}}
        release_name: ${{steps.tag.outputs.tag}}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       upload_url: ${{steps.create_release.outputs.upload_url}} 
       asset_path: ./${{steps.tag.outputs.tag}}${{matrix.target}}.zip
       asset_name: Release ${{steps.tag.outputs.tag}}${{matrix.target}}.zip
       asset_content_type: application/zip
   
