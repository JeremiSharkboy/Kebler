<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:csControls="clr-namespace:Kebler.UI.CSControls.TreeListView"
    xmlns:ui="clr-namespace:Kebler.UI">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Kebler.Styles;component/Themes/Generic.Dark.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="ToolBarButton" TargetType="{x:Type ui:ToolBarButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ToolBarButton.Static.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Margin" Value="5,2" />
        <Setter Property="Control.Padding" Value="10,2" />
        <Setter Property="Height" Value="36" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:ToolBarButton}">
                    <Border
                        Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Grid Margin="5,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2" />
                                <RowDefinition Height="Auto" MaxHeight="20" />
                                <RowDefinition />
                                <RowDefinition Height="2" />
                            </Grid.RowDefinitions>
                            <Image
                                Name="img"
                                Grid.Row="1"
                                Width="{TemplateBinding ui:ToolBarButton.PathWidth}"
                                Height="{TemplateBinding ui:ToolBarButton.PathHeight}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Source="{TemplateBinding ui:ToolBarButton.ImageSource}"
                                Stretch="Fill"
                                Visibility="Visible" />
                            <Path
                                Name="path"
                                Grid.Row="1"
                                Width="{TemplateBinding ui:ToolBarButton.PathWidth}"
                                Height="{TemplateBinding ui:ToolBarButton.PathHeight}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Data="{TemplateBinding ui:ToolBarButton.Data}"
                                Fill="{TemplateBinding Foreground}"
                                Focusable="false"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Stretch="Fill"
                                Visibility="Collapsed" />
                            <TextBlock
                                Grid.Row="2"
                                Margin="0,2,0,0"
                                VerticalAlignment="Center"
                                Style="{DynamicResource ToolBarButtonTitle}"
                                Text="{TemplateBinding ui:ToolBarButton.Title}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ui:ToolBarButton.ImageSource" Value="{x:Null}">
                            <Setter TargetName="path" Property="Visibility" Value="Visible" />
                            <Setter TargetName="img" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ToolBarButton.MouseOver.Background}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ToolBarButton.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ToolBarButton.Pressed.Background}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ToolBarButton.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type csControls:RowExpander}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type csControls:RowExpander}">
                    <ToggleButton
                        x:Name="Expander"
                        Margin="{Binding Node.Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type csControls:TreeListItem}}}"
                        ClickMode="Press"
                        IsChecked="{Binding Node.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type csControls:TreeListItem}}}"
                        Style="{DynamicResource ExpandCollapseToggleStyle}"
                        Visibility="{Binding Node.IsExpandable, Converter={StaticResource CanExpandConverter}, RelativeSource={RelativeSource AncestorType={x:Type csControls:TreeListItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type csControls:TreeListView}">
        <Style.Resources>
            <Style BasedOn="{StaticResource ListViewItemStyle}" TargetType="{x:Type csControls:TreeListItem}">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border
                                x:Name="Bd"
                                Padding="{TemplateBinding Control.Padding}"
                                Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="0"
                                SnapsToDevicePixels="true">
                                <GridViewRowPresenter
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="false" />
                                        <Condition Property="ListBoxItem.IsSelected" Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource Item.SelectedInactive.Background}" />
                                    <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource Item.SelectedInactive.Border}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="true" />
                                        <Condition Property="ListBoxItem.IsSelected" Value="true" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource Item.SelectedActive.Background}" />
                                    <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource Item.SelectedActive.Border}" />
                                    <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource ForegroundBrush.Light}" />
                                    <Setter Property="Control.Foreground" Value="{DynamicResource ForegroundBrush.Light}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Height" Value="20" />
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </Style.Resources>
        <Setter Property="Control.Background" Value="{DynamicResource ListView.Static.Background}" />
        <Setter Property="Control.BorderBrush" Value="{DynamicResource ListBox.Static.Border}" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border
                        x:Name="Bd"
                        Padding="0"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="0"
                        SnapsToDevicePixels="true">
                        <ScrollViewer Padding="{TemplateBinding Control.Padding}" Style="{DynamicResource ListViewWithGridViewScrollViewerStyle}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>