<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:csControls="clr-namespace:Kebler.UI.CSControls.TreeListView"
                    xmlns:converters="clr-namespace:Kebler.Services.Converters;assembly=Kebler.Services">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibility" />
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}" />
    </Style>

    <!--  checkbox  -->
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0" SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2" StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Geometry x:Key="OptionMarkGeomentry">
        F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z
    </Geometry>

    <Style TargetType="{x:Type Label}">
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
    </Style>


    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}" />
    </Style>
    <Style x:Key="HorizontalGridSplitter" TargetType="{x:Type GridSplitter}">
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch" />
        <Setter Property="Control.IsTabStop" Value="false" />
        <Setter Property="FrameworkElement.Margin" Value="0,-3,0,-3" />
        <Setter Property="FrameworkElement.Height" Value="7" />
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Grid Background="Transparent">
                        <Border
                            Height="1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converters:LevelToIndentConverter x:Key="LevelToIndentConverter" />
    <converters:CanExpandConverter x:Key="CanExpandConverter" />
    
    <Style x:Key="VerticalGridSplitter" TargetType="{x:Type GridSplitter}">
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch" />
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
        <Setter Property="Control.IsTabStop" Value="false" />
        <Setter Property="FrameworkElement.Margin" Value="-3,0,-3,0" />
        <Setter Property="FrameworkElement.Width" Value="7" />
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Grid Background="Transparent">
                        <Border
                            Width="1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="UIElement.Focusable" Value="false" />
        <Setter Property="FrameworkElement.Width" Value="16" />
        <Setter Property="FrameworkElement.Height" Value="16" />
        <Setter Property="Control.Background" Value="{DynamicResource TreeViewItem.TreeArrow.Static.Fill}" />
        <Setter Property="FrameworkElement.Height" Value="16" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Width="16" Height="16" Padding="0"
                        Background="Transparent">
                        <Path
                            x:Name="ExpandPath" HorizontalAlignment="Center" VerticalAlignment="Center"
                            Data="M 0,0 L 0,7 5,3.5 Z"
                            Fill="{TemplateBinding Control.Background}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Path.Data" Value="M 0,0 L 3.5,5 7,0 Z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <Style TargetType="{x:Type csControls:RowExpander}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type csControls:RowExpander}">
                    <ToggleButton x:Name="Expander"
                                      Margin="{Binding Node.Level, Converter={StaticResource LevelToIndentConverter}, RelativeSource={RelativeSource AncestorType={x:Type csControls:TreeListItem}}}"
                                      ClickMode="Press"
                                      IsChecked="{Binding Node.IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type csControls:TreeListItem}}}"
                                      Style="{DynamicResource ExpandCollapseToggleStyle}"
                                      Visibility="{Binding Node.IsExpandable, Converter={StaticResource CanExpandConverter}, RelativeSource={RelativeSource AncestorType={x:Type csControls:TreeListItem}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>